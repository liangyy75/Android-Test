apply plugin: 'com.android.application'
apply plugin: 'groovyx.android'
apply plugin: 'org.anarres.jarjar'  // TODO: 我来实现一个JarJar吧
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao' // apply plugin

import com.android.build.gradle.AppExtension

// import com.liang.example.plugin.MyGroovyPlugin
// apply plugin: MyGroovyPlugin

class GreetingPluginExtension {
    String msg = 'Hello from GreetingPlugin'
}

class GreetingPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        def extension = project.extensions.create('greeting', GreetingPluginExtension)
        project.task('hello') { doLast { println extension.msg } }
    }
}

apply plugin: GreetingPlugin

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.liang.example.androidtest"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs = [
                'src/main/java',
                'src/main/kotlin',
                'src/main/groovy',
        ]
        main.res.srcDirs = [
                'src/main/res',
                'src/main/res-ui',
                'src/main/test-fragment',
                'src/main/test-recyclerview',
                'src/main/test-handler',
                'src/main/test-androidfix',
                'src/main/test-apt',
                'src/main/test-volley',
                'src/main/test-shell',
                'src/main/test-music',
                'src/main/test-view',
        ]
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }
}

androidGroovy {
    skipJavaC = true
    sourceSets {
        main {
            groovy {
                srcDirs += 'src/main/java'
                srcDirs += 'src/main/kotlin'
            }
        }
    }
    options {
        configure(groovyOptions) {
            encoding = 'UTF-8'
            forkOptions.jvmArgs = ['-noverify'] // maybe necessary if you use Google Play Services
            javaAnnotationProcessing = true
        }
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.google.android.material:material:1.2.0-alpha03'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.github.bumptech.glide:glide:4.10.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'

    implementation 'org.greenrobot:greendao:3.2.2' // add library
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    add(deps.gson[0], deps.gson[1])

    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.squareup.okhttp3:okhttp:4.3.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.3.0'

    // implementation 'com.google.firebase:firebase-messaging:20.0.1'

    api "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"

    implementation "com.jakewharton:butterknife:10.2.1"
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    api 'com.google.dagger:dagger:2.25.4'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.25.4'

    api project(':utils-ktx')
    api project(":remote")
    api project(':router')
    annotationProcessor project(':router')
    api project(":spi_impl2")
    api project(":spi_impl1")
    api project(":spi_interface")
    // 不需要的时候就没有这个实现了，当然还要在app模块的resources/META-INF/services里面的com.liang.example.spi_interface.SpiDisplay，而且需要注意ServiceLoader的reload方法

    // api 'com.alibaba:arouter-api:1.4.0'
    // annotationProcessor 'com.alibaba:arouter-compiler:1.2.1'

    api project(':block')

    deps.lifecycle.forEach { String key, Tuple t -> add(t.get(0), t.get(1)) }
    add(deps.rxjava2.get(0), deps.rxjava2.get(1))
    add(deps.rx_android.get(0), deps.rx_android.get(1))
    add(deps.rxkotlin2.get(0), deps.rxkotlin2.get(1))

    api "org.aspectj:aspectjrt:${versions.aspectj}"
    // compileOnly "com.google.auto.value:auto-value:${versions.auto_value}"
    annotationProcessor "com.google.auto.value:auto-value:${versions.auto_value}"
    // apt "com.google.auto.value:auto-value:${versions.auto_value}"

    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${versions.auto_value_gson}"
    api "com.ryanharter.auto.value:auto-value-gson-runtime:${versions.auto_value_gson}"

    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${versions.auto_value_parcel}"
    api "com.ryanharter.auto.value:auto-value-parcel-adapter:${versions.auto_value_parcel}"

    api jarjar.repackage("grooid") {
        from("org.codehaus.groovy:groovy:2.4.16:grooid")
        classDelete('org.codehaus.groovy.vmplugin.v7.IndyInterface')
    }

    compileOnly 'com.anggrayudi:android-hidden-api:28.1'
}

greeting {
    msg = 'Hello from App Setting'
}

// apply plugin: 'com.google.gms.google-services'

File.metaClass.allFiles = { ->
    def files = []
    def thisObj = delegate as File
    thisObj.listFiles().each {
        if (it.isDirectory()) {
            files.addAll(it.allFiles())
        } else {
            files.add(it)
        }
    }
    return files
}

task("learn") {
    doLast {
        def ifs = inputs.files
        def ips = inputs.properties
        def isfs = inputs.sourceFiles
        def ofs = outputs.files
        def jcofs = getTask("compileDebugJavaWithJavac").outputs.files
        def jcoafs = jcofs.size() == 0 ? '' : ('\n\t\t' + jcofs.collect { it.length() > 0 ? it.allFiles().join('\n\t\t') : '' }.findAll { it.size() > 0 }.join('\n\t\t'))
        println "\tinputs.files: ${ifs.size() == 0 ? '' : ('\n\t\t' + ifs.join('\n\t\t'))}" +
                "\n\tinputs.properties: ${ips.size() == 0 ? '' : ('\n\t\t' + ips.entrySet().join('\n\t\t'))}" +
                "\n\tinputs.sourceFiles: ${isfs.size() == 0 ? '' : ('\n\t\t' + isfs.join('\n\t\t'))}" +
                "\n\toutputs.files: ${ofs.size() == 0 ? '' : ('\n\t\t' + ofs.join('\n\t\t'))}" +
                "\n\tcompileDebugJavaWithJavac.outputs.files: ${jcofs.size() == 0 ? '' : ('\n\t\t' + jcofs.join('\n\t\t'))}" +
                "\n\tcompileDebugJavaWithJavac.outputs.allFiles: ${jcoafs}"
    }
}

afterEvaluate {
    tasks.forEach { Task task ->
        task.doFirst {
            // def ifs = task.inputs.files
            // def ips = task.inputs.properties
            // def isfs = task.inputs.sourceFiles
            // def ofs = task.outputs.files
            // println "\tinputs.files: ${ifs.size() == 0 ? '' : ('\n\t\t' + ifs.join('\n\t\t'))}" +
            //         "\n\tinputs.properties: ${ips.size() == 0 ? '' : ('\n\t\t' + ips.entrySet().join('\n\t\t'))}" +
            //         "\n\tinputs.sourceFiles: ${isfs.size() == 0 ? '' : ('\n\t\t' + isfs.join('\n\t\t'))}" +
            //         "\n\toutputs.files: ${ofs.size() == 0 ? '' : ('\n\t\t' + ofs.join('\n\t\t'))}"
            println(task.class.name)
        }
    }
    // println "tasks: ${tasks.join(",")}"
    // println "defaultTasks: ${defaultTasks.join(",")}"
    getTasksByName("compileDebugAidl", false)[0].enabled = false
    getTasksByName("compileDebugRenderscript", false)[0].enabled = false
    getTasksByName("mergeDebugShaders", false)[0].enabled = false
    getTasksByName("compileDebugShaders", false)[0].enabled = false
    getTasksByName("generateDebugAssets", false)[0].enabled = false
    getTasksByName("mergeDebugAssets", false)[0].enabled = false
    getTasksByName("processDebugJavaRes", false)[0].enabled = false

    insert(getTask("learn"), getTask("compileDebugJavaWithJavac"), getTask("transformClassesWithDexBuilderForDebug"))

    def sss = project.extensions.getByType(AppExtension.class).sourceSets
    println "\tproject.projectDir: ${project.projectDir}" +
            "\n\tproject.buildDir: ${project.buildDir}" +
            "\n\tproject.rootDir: ${project.rootDir}" +
            "\n\tproject.sourceSets: ${sss.getNames().join(', ')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.java.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.res.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.resources.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.jni.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.jniLibs.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.assets.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.aidl.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.renderscript.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}" +
            "\n\tproject.sourceSets.java: ${sss.getAsMap().collect { "name: ${it.key}, sourceSet: ${it.value.shaders.srcDirs.join('\n\t\t\t')}" }.join('\n\t\t')}"
}

def getTask(String name) {
    return getTasksByName(name, false)[0]
}

static def insert(Task targetTask, Task beforeTask, Task afterTask) {
    before(targetTask, afterTask)
    after(targetTask, beforeTask)
}

static def before(Task targetTask, Task afterTask) {
    afterTask.dependsOn(targetTask)
}

static def after(Task targetTask, Task beforeTask) {
    targetTask.dependsOn(beforeTask)
}
